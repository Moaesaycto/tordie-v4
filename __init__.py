"""                             
_/_/_/_/_/                          _/  _/                _/  _/        _/    
   _/      _/_/    _/  _/_/    _/_/_/        _/_/        _/  _/      _/  _/   
  _/    _/    _/  _/_/      _/    _/  _/  _/_/_/_/      _/_/_/_/    _/  _/    
 _/    _/    _/  _/        _/    _/  _/  _/                _/      _/  _/     
_/      _/_/    _/          _/_/_/  _/    _/_/_/          _/  _/    _/

CC BY-NC-SA: 2022/2023

Tordie 4.0 is an Origami pattern generator with high mathematical functionality
designed to cross the bridge from ideas into practical SVG files to use for scoring.

Developer: Moaesaycto (S.L.)

Title generated by: https://ascii.today/
"""

from shapes.circle import Circle
from utils import color
from svg.svg import Diagram
from shapes.point import Point
from shapes.line import EuclideanLine, PoincareLine
from shapes.parametric import Parametric
import numpy as np

from math import pi
from options import *
import maths.utils as helper

VERSION = "v4.0.0"

def init(**kwargs):
    short = kwargs.get("short", False)

    print(f"\n{color.green}" + "{:=^40}".format(" TORDIE 4.0 ") + color.end)

    if not short:
        print(f"{color.yellow}Currently running: " + "{:.>22}".format(f" {VERSION} ") + color.end)
        print(f"{color.yellow}Developed by: " + "{:.>27}".format(" Moaesaycto (SL) ") + color.end)
        print(color.green + "{:=^40}".format("") + f"{color.end}\n")

    print(color.magenta + "Initializing program..." + color.end)
    if POINCARE_ERR < MAN_EPS or PARAM_REFLECT_M_DIFF < MAN_EPS or DIFF_STEP < MAN_EPS:
        print(f"{color.red}Custom machine number incompatible with set options.\nInitialization failed.{color.end}")
        exit()
    print(color.cyan + "Initialization complete." + color.end)

def mapping(point):
    return Point(3,0)/(Point(1.001,0) - point)
def mapping2(point):
    return Point(-1,0)/(Point(1.001,0) - point)

if __name__ == '__main__':
    init(short=False)
    drawing = Diagram()
    lines = [Parametric(lambda t: t, lambda t: i, -50, 50) for i in range(-50, 51)]
    lines += [Parametric(lambda t: i, lambda t: t, -50, 50) for i in range(-50, 51)]
    line2 = [line.conformal(lambda t: mapping(t)) for line in lines]
    #line3 = [line.conformal(lambda t: mapping2(t)) for line in lines]
    for line in line2: line.stroke = "blue"
    #for line in line3: line.stroke = "red"
    drawing.draw(lines, line2)
    drawing.display()

"""                             
_/_/_/_/_/                          _/  _/                _/  _/        _/    
   _/      _/_/    _/  _/_/    _/_/_/        _/_/        _/  _/      _/  _/   
  _/    _/    _/  _/_/      _/    _/  _/  _/_/_/_/      _/_/_/_/    _/  _/    
 _/    _/    _/  _/        _/    _/  _/  _/                _/      _/  _/     
_/      _/_/    _/          _/_/_/  _/    _/_/_/          _/  _/    _/

CC BY-NC-SA: 2022/2023

Tordie 4.0 is an Origami pattern generator with high mathematical functionality
designed to cross the bridge from ideas into practical SVG files to use for scoring.

Developer: Moaesaycto (S.L.)

Title generated by: https://ascii.today/
"""

from utils import color
from svg.svg import Diagram
from shapes.point import Point
from shapes.line import EuclideanLine

VERSION = "v4.0.0"

def init(**kwargs):
    short = kwargs.get("short", False)

    print(f"\n{color.green}" + "{:=^40}".format(" TORDIE 4.0 ") + color.end)

    if not short:
        print(f"{color.yellow}Currently running: " + "{:.>22}".format(f" {VERSION} ") + color.end)
        print(f"{color.yellow}Developed by: " + "{:.>27}".format(" Moaesaycto (SL) ") + color.end)
        print(color.green + "{:=^40}".format("") + f"{color.end}\n")

    print(color.magenta + "Initializing program..." + color.end)
    # Further initialising done here
    print(color.cyan + "Initialization complete." + color.end)


if __name__ == '__main__':
    init(short=False)
    drawing = Diagram()
    point = Point(0, 0)
    point2 = Point(0, 1)
    line = EuclideanLine(point, point2)
    point.draw(drawing)
    point2.draw(drawing)
    line.draw(drawing)
    drawing.display()
